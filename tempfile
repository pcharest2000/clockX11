void displayfunction(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(10);
	glLoadIdentity();
	    // rotation about Z axis
	glRotatef(angle,0.0,0.0,1.0);


	glBegin(GL_POINTS);
	    glColor3f(1, 0, 0);
	    glVertex2f(0,0);
	    glVertex2f(0,colorf);// set vertex color to red
	    glVertex2f(0.5,0.5);        // draw a triangle with v1, v2, v3
	    glVertex2f(-0.5,0.5);
	glEnd();
	//glFlush();
	glFinish();
	glutSwapBuffers();

	//
}


	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInit(&argc, argv);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(800, 600);
	glutCreateWindow("Hello World");
	glutReshapeFunc(reshape);
	
	/*
 ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#include "ch.h"
#include "hal.h"
#include "shell.h"
#include "chprintf.h"


#include<GL/glut.h>
#include<GL/gl.h>

#define SHELL_WA_SIZE       THD_WORKING_AREA_SIZE(4096)
#define CONSOLE_WA_SIZE     THD_WORKING_AREA_SIZE(4096)
#define TEST_WA_SIZE        THD_WORKING_AREA_SIZE(4096)
#define PRINT_WA_SIZE		THD_WORKING_AREA_SIZE(256)

#define cputs(msg) chMsgSend(cdtp, (msg_t)msg)

static thread_t *cdtp;
static thread_t *shelltp1;
static thread_t *shelltp2;

static THD_WORKING_AREA(myThreadWorkingArea, 128);
static THD_WORKING_AREA(myThreadWorkingAreaGraph, 2048);


/*
 * LED flashing thread.
 */
static GLclampf colorf=0;
static GLfloat angle=0;
void displayfunction(void) {
	glClear(GL_COLOR_BUFFER_BIT);
	glPointSize(10);
	glLoadIdentity();
	    // rotation about Z axis
	glRotatef(angle,0.0,0.0,1.0);


	glBegin(GL_POINTS);
	    glColor3f(1, 0, 0);
	    glVertex2f(0,0);
	    glVertex2f(0,colorf);// set vertex color to red
	    glVertex2f(0.5,0.5);        // draw a triangle with v1, v2, v3
	    glVertex2f(-0.5,0.5);
	glEnd();
	//glFlush();
	glFinish();
	glutSwapBuffers();

	//
}
static THD_FUNCTION(myThread, arg) {



	while (true) {
		displayfunction();
		colorf+=0.02;
		angle+=1;
		if(colorf>1)
			colorf=0;

		//cputs("Bong");
	//	printf("Color %f",colorf);
		chThdSleepMilliseconds(100);

		//glutDisplayFunc(display);
		//glutMainLoop();

	}

}

static const ShellCommand commands[] = { { NULL, NULL } };

static const ShellConfig shell_cfg1 =
		{ (BaseSequentialStream *) &SD1, commands };

static const ShellConfig shell_cfg2 =
		{ (BaseSequentialStream *) &SD2, commands };

/*
 * Console print server done using synchronous messages. This makes the access
 * to the C printf() thread safe and the print operation atomic among threads.
 * In this example the message is the zero terminated string itself.
 */
static THD_FUNCTION(console_thread, arg) {

	(void) arg;
	while (!chThdShouldTerminateX()) {
		thread_t *tp = chMsgWait();
		puts((char *) chMsgGet(tp));
		fflush(stdout);
		chMsgRelease(tp, MSG_OK);
	}
}

/**
 * @brief Shell termination handler.
 *
 * @param[in] id event id.
 */
static void termination_handler(eventid_t id) {

	(void) id;
	if (shelltp1 && chThdTerminatedX(shelltp1)) {
		chThdWait(shelltp1);
		shelltp1 = NULL;
		chThdSleepMilliseconds(10);
		cputs("Init: shell on SD1 terminated");
		chSysLock();
		oqResetI(&SD1.oqueue);
		chSchRescheduleS();
		chSysUnlock();
	}
	if (shelltp2 && chThdTerminatedX(shelltp2)) {
		chThdWait(shelltp2);
		shelltp2 = NULL;
		chThdSleepMilliseconds(10);
		cputs("Init: shell on SD2 terminated");
		chSysLock();
		oqResetI(&SD2.oqueue);
		chSchRescheduleS();
		chSysUnlock();
	}
}

static event_listener_t sd1fel, sd2fel;

/**
 * @brief SD1 status change handler.
 *
 * @param[in] id event id.
 */
static void sd1_handler(eventid_t id) {
	eventflags_t flags;

	(void) id;
	flags = chEvtGetAndClearFlags(&sd1fel);
	if ((flags & CHN_CONNECTED ) && (shelltp1 == NULL)) {
		cputs("Init: connection on SD1");
		shelltp1 = chThdCreateFromHeap(NULL, SHELL_WA_SIZE, "shell1",
		NORMALPRIO + 10, shellThread, (void *) &shell_cfg1);
	}
	if (flags & CHN_DISCONNECTED) {
		cputs("Init: disconnection on SD1");
		chSysLock();
		iqResetI(&SD1.iqueue);
		chSchRescheduleS();
		chSysUnlock();
	}
}

/**
 * @brief SD2 status change handler.
 *
 * @param[in] id event id.
 */
static void sd2_handler(eventid_t id) {
	eventflags_t flags;

	(void) id;
	flags = chEvtGetAndClearFlags(&sd2fel);
	if ((flags & CHN_CONNECTED ) && (shelltp2 == NULL)) {
		cputs("Init: connection on SD2");
		shelltp2 = chThdCreateFromHeap(NULL, SHELL_WA_SIZE, "shell2",
		NORMALPRIO + 10, shellThread, (void *) &shell_cfg2);
	}
	if (flags & CHN_DISCONNECTED) {
		cputs("Init: disconnection on SD2");
		chSysLock();
		iqResetI(&SD2.iqueue);
		chSchRescheduleS();
		chSysUnlock();
	}
}

void reshape(int x, int y)
{
    if (y == 0 || x == 0) return;  //Nothing is visible then, so return
    //Set a new projection matrix
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    //Angle of view:40 degrees
    //Near clipping plane distance: 0.5
    //Far clipping plane distance: 20.0

    gluPerspective(40.0,(GLdouble)x/(GLdouble)y,0.5,20.0);
    glMatrixMode(GL_MODELVIEW);
    glViewport(0,0,x,y);  //Use the whole window for rendering
    printf("In Rezise");
}


static evhandler_t fhandlers[] =
		{ termination_handler, sd1_handler, sd2_handler };

/*------------------------------------------------------------------------*
 * Simulator main.                                                        *
 *------------------------------------------------------------------------*/
int main(int argc, char**argv) {
	event_listener_t tel;
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE);
	glutInit(&argc, argv);
	glutInitWindowPosition(100, 100);
	glutInitWindowSize(800, 600);
	glutCreateWindow("Hello World");
	glutReshapeFunc(reshape);
	//glutMainLoop();
	//reshape(800,600);
	/*
	 * System initializations.
	 * - HAL initialization, this also initializes the configured device drivers
	 *   and performs the board-specific initializations.
	 * - Kernel initialization, the main() function becomes a thread and the
	 *   RTOS is active.
	 */
	halInit();
	chSysInit();



	/*
	 * Serial ports (simulated) initialization.
	 */
	sdStart(&SD1, NULL);
	sdStart(&SD2, NULL);

	/*
	 * Shell manager initialization.
	 */
	shellInit();
	chEvtRegister(&shell_terminated, &tel, 0);

	/*
	 * Console thread started.
	 */
	cdtp = chThdCreateFromHeap(NULL, CONSOLE_WA_SIZE, "console",
	NORMALPRIO + 1, console_thread, NULL);

	/***led thread*/
	thread_t *tp = chThdCreateFromHeap(NULL, THD_WORKING_AREA_SIZE(128), "name",
	NORMALPRIO + 1, myThread, NULL);

	/*
	 * Initializing connection/disconnection events.
	 */
	cputs("Shell service started on SD1, SD2");
	cputs("  - Listening for connections on SD1");
	chEvtRegister(chnGetEventSource(&SD1), &sd1fel, 1);
	cputs("  - Listening for connections on SD2");
	chEvtRegister(chnGetEventSource(&SD2), &sd2fel, 2);

	/*
	 * Events servicing loop.
	 */
	while (!chThdShouldTerminateX())
		chEvtDispatch(fhandlers, chEvtWaitOne(ALL_EVENTS));

	/*
	 * Clean simulator exit.
	 */
	chEvtUnregister(chnGetEventSource(&SD1), &sd1fel);
	chEvtUnregister(chnGetEventSource(&SD2), &sd2fel);
	return 0;
}
	
	
	
	